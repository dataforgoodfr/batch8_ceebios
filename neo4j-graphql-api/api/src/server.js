const express = require('express');
const neo4j = require('neo4j-driver');
const  neo4jgraphql = require('neo4j-graphql-js');
const { ApolloServer } = require('apollo-server-express');
const typeDefs  = require('./graphql-schema');

const app = express()

// GraphQL Schema 
/*
 * Create an executable GraphQL schema object from GraphQL type definitions including autogenerated queries and mutations.
 * Doc : https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */
const schema = neo4jgraphql.makeAugmentedSchema({typeDefs})

// Neo4j db connection 
/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
    process.env.NEO4J_URI || 'bolt://localhost:7687',
    neo4j.auth.basic(
      process.env.NEO4J_USER || 'neo4j',
      process.env.NEO4J_PASSWORD || 'treeoflife'
    ),
    {
      encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF',
    }
  )
// Apollo Integration 
/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */

const server = new ApolloServer({
    context: { driver, neo4jDatabase: process.env.NEO4J_DATABASE },
    schema: schema,
    introspection: true,
    playground: true,
  })

server.applyMiddleware({ app });



const HOST = process.env.GRAPHQL_SERVER_HOST || '127.0.0.1';
const PORT = process.env.PORT || 4001;
const PATH = process.env.GRAPHQL_SERVER_PATH || '/graphql';

app.listen(
    PORT, 
    () => console.log(`ðŸš€ Server started on port http://${HOST}:${PORT}${PATH}`)
);